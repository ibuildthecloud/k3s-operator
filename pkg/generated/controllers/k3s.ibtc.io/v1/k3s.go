/*
Copyright 2020 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/ibuildthecloud/k3s-operator/pkg/apis/k3s.ibtc.io/v1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type K3sHandler func(string, *v1.K3s) (*v1.K3s, error)

type K3sController interface {
	generic.ControllerMeta
	K3sClient

	OnChange(ctx context.Context, name string, sync K3sHandler)
	OnRemove(ctx context.Context, name string, sync K3sHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() K3sCache
}

type K3sClient interface {
	Create(*v1.K3s) (*v1.K3s, error)
	Update(*v1.K3s) (*v1.K3s, error)
	UpdateStatus(*v1.K3s) (*v1.K3s, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.K3s, error)
	List(namespace string, opts metav1.ListOptions) (*v1.K3sList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.K3s, err error)
}

type K3sCache interface {
	Get(namespace, name string) (*v1.K3s, error)
	List(namespace string, selector labels.Selector) ([]*v1.K3s, error)

	AddIndexer(indexName string, indexer K3sIndexer)
	GetByIndex(indexName, key string) ([]*v1.K3s, error)
}

type K3sIndexer func(obj *v1.K3s) ([]string, error)

type k3sController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewK3sController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) K3sController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &k3sController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromK3sHandlerToHandler(sync K3sHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.K3s
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.K3s))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *k3sController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.K3s))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateK3sDeepCopyOnChange(client K3sClient, obj *v1.K3s, handler func(obj *v1.K3s) (*v1.K3s, error)) (*v1.K3s, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *k3sController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *k3sController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *k3sController) OnChange(ctx context.Context, name string, sync K3sHandler) {
	c.AddGenericHandler(ctx, name, FromK3sHandlerToHandler(sync))
}

func (c *k3sController) OnRemove(ctx context.Context, name string, sync K3sHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromK3sHandlerToHandler(sync)))
}

func (c *k3sController) Enqueue(namespace, name string) {
	c.controller.Enqueue(namespace, name)
}

func (c *k3sController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controller.EnqueueAfter(namespace, name, duration)
}

func (c *k3sController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *k3sController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *k3sController) Cache() K3sCache {
	return &k3sCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *k3sController) Create(obj *v1.K3s) (*v1.K3s, error) {
	result := &v1.K3s{}
	return result, c.client.Create(context.TODO(), obj.Namespace, obj, result, metav1.CreateOptions{})
}

func (c *k3sController) Update(obj *v1.K3s) (*v1.K3s, error) {
	result := &v1.K3s{}
	return result, c.client.Update(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *k3sController) UpdateStatus(obj *v1.K3s) (*v1.K3s, error) {
	result := &v1.K3s{}
	return result, c.client.UpdateStatus(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *k3sController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), namespace, name, *options)
}

func (c *k3sController) Get(namespace, name string, options metav1.GetOptions) (*v1.K3s, error) {
	result := &v1.K3s{}
	return result, c.client.Get(context.TODO(), namespace, name, result, options)
}

func (c *k3sController) List(namespace string, opts metav1.ListOptions) (*v1.K3sList, error) {
	result := &v1.K3sList{}
	return result, c.client.List(context.TODO(), namespace, result, opts)
}

func (c *k3sController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), namespace, opts)
}

func (c *k3sController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (*v1.K3s, error) {
	result := &v1.K3s{}
	return result, c.client.Patch(context.TODO(), namespace, name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type k3sCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *k3sCache) Get(namespace, name string) (*v1.K3s, error) {
	obj, exists, err := c.indexer.GetByKey(namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1.K3s), nil
}

func (c *k3sCache) List(namespace string, selector labels.Selector) (ret []*v1.K3s, err error) {

	err = cache.ListAllByNamespace(c.indexer, namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.K3s))
	})

	return ret, err
}

func (c *k3sCache) AddIndexer(indexName string, indexer K3sIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.K3s))
		},
	}))
}

func (c *k3sCache) GetByIndex(indexName, key string) (result []*v1.K3s, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1.K3s, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1.K3s))
	}
	return result, nil
}

type K3sStatusHandler func(obj *v1.K3s, status v1.K3sStatus) (v1.K3sStatus, error)

type K3sGeneratingHandler func(obj *v1.K3s, status v1.K3sStatus) ([]runtime.Object, v1.K3sStatus, error)

func RegisterK3sStatusHandler(ctx context.Context, controller K3sController, condition condition.Cond, name string, handler K3sStatusHandler) {
	statusHandler := &k3sStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromK3sHandlerToHandler(statusHandler.sync))
}

func RegisterK3sGeneratingHandler(ctx context.Context, controller K3sController, apply apply.Apply,
	condition condition.Cond, name string, handler K3sGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &k3sGeneratingHandler{
		K3sGeneratingHandler: handler,
		apply:                apply,
		name:                 name,
		gvk:                  controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterK3sStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type k3sStatusHandler struct {
	client    K3sClient
	condition condition.Cond
	handler   K3sStatusHandler
}

func (a *k3sStatusHandler) sync(key string, obj *v1.K3s) (*v1.K3s, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type k3sGeneratingHandler struct {
	K3sGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *k3sGeneratingHandler) Remove(key string, obj *v1.K3s) (*v1.K3s, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.K3s{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *k3sGeneratingHandler) Handle(obj *v1.K3s, status v1.K3sStatus) (v1.K3sStatus, error) {
	objs, newStatus, err := a.K3sGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
